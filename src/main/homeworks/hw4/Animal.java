package src.main.homeworks.hw4;

/*Для нашего условия подойдёт создание абстрактного класса,
* который определит общие свойства и методы для всех животных
* и предоставит базовый класс для наследования.*/
public abstract class Animal {

    /*Статическое поле animalCounter будет пренадлежать всему классу, а не его экземплярам-наследникам,
    * таким образом реализуется счётчик всех созданных животных.*/
    private static int animalCounter = 0;
    public Animal(){
        animalCounter++;    //Увеличить счётчик при каждом создании объекта-наследника класса Animal
    }

    /*Поведения животного: бежать и плыть зависят от конкретного типа животного,
    * поэтому абстрактные методы run() и swim() не имеют реализации в базвом классе,
    * но предполагают переопределение в классах-наследниках в соответствии с ограничениями.
    * (Можно было бы сделать их булевыми, но под текущую задачу это лишнее, а вот в ДЗ 5
    * это может иметь место быть)*/
    public abstract void run(int distance);
    public abstract  void swim(int distance);

    /*От себя добавил неабстрактный метод с дефолтной реализацией,
    * посмотреть на его примере переопределение в классе-наследнике
    * и вызов без переопределения*/
    public void eat(){
        System.out.println("The animal is eating");
    }

    /*Метод getAnimalCounter() статический, потому что он связан
    * со статическим полем animalCounter, что позволяет получить
    * общее кол-во созданных объектов животных без создания или
    * ссылки на какой-либо конкретный объект класса-наследника.*/
    public static int getAnimalCounter(){
        return  animalCounter;
    }
}
